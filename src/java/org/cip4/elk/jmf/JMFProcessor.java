package org.cip4.elk.jmf;

import org.cip4.jdflib.jmf.JDFMessage;
import org.cip4.jdflib.jmf.JDFMessageService;
import org.cip4.jdflib.jmf.JDFResponse;

/**
 * Classes that process <em>JMF messages</em> should implement this interface. A 
 * class that implements this interface can support one or more JMF message types. 
 * If the implementing class does not support a JMF message type it should return
 * a response with the appropriate JMF return code.
 * 
 * @see <a href="http://www.cip4.org/documents/jdf_specifications/JDF1.2.pdf">JDF Specification Release 1.2, Chapter 5: JDF Messaging with the Job Messaging Format</a>
 * @see <a href="http://www.cip4.org/documents/jdf_specifications/JDF1.2.pdf">JDF Specification Release 1.2, Appendix I: Supported Error Codes in JMF and Notification elements</a>
 * @author Claes Buckwalter (clabu@itn.liu.se)
 */
public interface JMFProcessor
{
    /**
     * Processes a JMF message and returns a <strong>synchronous</strong> response. The incoming <code>JDFMessage</code> is processed 
     * and the result is appended to the <code>JDFResponse</code>, also is provided as an input parameter.
     * <code>JDFResponse</code> must contain some prefilled generated by the caller of this
     * interface. When this method returns the <code>JDFResponse</code> will eventually be sent back to
     * the <em>JDF Controller</em> that sent the incoming JMF message. The <em>JMF return code</em> of the processing
     * is returned by this method, see <a href="http://www.cip4.org">JDF Specification Release 1.2, Appendix I</a>. 
     * The return code is also included in the <code>JDFResponse</code>.
     * <p>
     * If the <code>JMFMessage</code> needs to be processed <strong>asynchornously</strong> a response should still be 
     * returned synchronously in a <code>JDFResponse</code>. It is up to the implementing class to be some other means
     * send the results of the processing in an additional asynchronous message, a <em>JMF Acknowledge</em> message, 
     * when the processing has finished. See the <a href="http://www.cip4.org">JDF Specification</a> for more details.
     * </p>
     * 
     * Data that must be prefilled by the caller:
     * <ul>
     * 	  <li>
     * 		Response/@ID
     *    </li>
     *    <li>
     * 		Response/@refID
     *    </li>
     *    <li>
     * 		Response/@Type
     *    </li>
     * 	  <li>
     * 		Response/@xsi:type
     * 	</li>	
     * </ul> 
     * 
     * @param input     the incoming JMF message to process
     * @param output    a pre-configured JMF response for the result of the processing
     * @return the JMF code of the processing
     */
    public int processJMF(JDFMessage input, JDFResponse output);
    
    /**
     * Returns an array of JDF MessageService elements that describe the 
     * message types this processor handles.
     * @return  an array of JDFMessageService elements that describe the message types
     *          this processor handles; an empty array if no messages are handled
     */
    public JDFMessageService[] getMessageServices();
    
}
