package org.cip4.elk.device.process;


import org.cip4.jdflib.jmf.JDFMessage;
import org.cip4.jdflib.node.JDFNode;

/**
 * This class represents an event generated by a JDF device.
 * 
 * @author Claes Buckwalter (clabu@itn.liu.se)
 * @deprecated Not used.
 */
public class ProcessEvent
{
	protected Process source;
	protected JDFNode jdf;
	protected JDFMessage jmfMessage;
	protected long timestamp;
    
	/**
     * Creates a new device event.
	 * @param message  a JMF Message specifying the event or status change
	 * @param source   the device that generated this event
	 * @param jdf      the JDF document related to the event
	 */
	public ProcessEvent(JDFMessage jmfMessage, Process source, JDFNode jdf)
	{
		this.source= source;
		this.jdf = jdf;
		this.jmfMessage = jmfMessage;
        this.timestamp = System.currentTimeMillis();
	}
		
	/**
	 * Returns the device that generated this event.
	 * 
	 * @return the device that generated this event.
	 */
	public Process getEventSource()
	{
		return source;
	}
	
	/**
	 * Returns the JDF document that the device was processing when the
	 * event occurred.
	 * @return the JDF document that the device was processing when the
	 * event occurred.
	 */
	public JDFNode getJDF()
	{
		return jdf;
	}
	
	/**
	 * Returns information about this event in the form of a JMF signal that
	 * can be sent as a JMF message to any subscribing controllers.
	 * @return
	 */
	public JDFMessage getJMFMessage()
	{
		return jmfMessage;
	}
    
    public long getTimestamp()
    {
        return timestamp;
    }

    public String toString()
    {
        return "DeviceEvent[JMF Message: " + jmfMessage + ";  Source: " + source + ";  Time stamp: " + timestamp + ";  JDF: " + jdf + "]";
    }
   
}
